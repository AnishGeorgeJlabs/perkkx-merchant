// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('perkkx.controllers', []).controller('BadgeCtrl', function($scope) {
    console.log("initialized BadgeCtrl");
    return $scope.badges = {
      used: 0,
      expired: -10,
      disputed: 0
    };
  }).controller('PendingCtrl', function($log, $scope, pxApiConnect, $ionicScrollDelegate) {
    var clearState;
    $scope.data = {
      rcode: "",
      resultCode: ""
    };
    $scope.state = {
      isLoading: false,
      isError: false,
      haveResult: false,
      billshow: false
    };
    clearState = function() {
      $scope.state.isLoading = false;
      $scope.state.isError = false;
      $scope.state.haveResult = false;
      return $scope.state.billshow = false;
    };
    $scope.clearInput = function() {
      $log.debug('clearing');
      clearState();
      return $scope.data.rcode = "";
    };
    $scope.$watch(function() {
      return $scope.data.rcode;
    }, function(old_val, new_val) {
      if (new_val.length > 8) {
        return $scope.data.rcode === old_val;
      }
    });
    $scope.checkCode = function() {
      var rcode;
      rcode = $scope.data.rcode;
      if (rcode.length === 8) {
        $scope.state.isLoading = true;
        return pxApiConnect.apiCheckValid(rcode, $scope.callback);
      } else {
        return clearState();
      }
    };
    $scope.callback = function(data) {
      $scope.state.isLoading = false;
      $log.debug("data : " + (JSON.stringify(data)));
      if (data.valid) {
        $scope.data.resultCode = data.data;
        return $scope.state.haveResult = true;
      } else {
        $log.debug("else part");
        return $scope.state.isError = true;
      }
    };
    return $scope.submit = function(data) {
      $scope.state.isLoading = true;
      $ionicScrollDelegate.scrollTop();
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return $scope.clearInput();
      });
    };
  }).controller('UsedCtrl', function($scope, pxApiConnect) {
    $scope.codes = [];
    pxApiConnect.setCallBack('used', function(data, more) {
      var i, len, obj, results;
      if (more) {
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          obj = data[i];
          results.push($scope.codes.push(obj));
        }
        return results;
      } else {
        return $scope.codes = data;
      }
    });
    $scope.initGet = function() {
      return pxApiConnect.apiGet('used');
    };
    $scope.initGet();
    $scope.refresh = function() {
      return $scope.initGet()["finally"](function() {
        return $scope.$broadcast('scroll.refreshComplete');
      });
    };
    $scope.loadMore = function() {
      var res;
      res = pxApiConnect.apiMore('used');
      if (res.more) {
        return res.future["finally"](function() {
          return $scope.$broadcast('scroll.infiniteScrollComplete');
        });
      } else {
        return $scope.$broadcast('scroll.infiniteScrollComplete');
      }
    };
    return $scope.submit = function(data) {
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return $scope.initGet();
      });
    };
  }).controller('ExpiredCtrl', function($scope, pxApiConnect) {
    $scope.codes = [];
    pxApiConnect.setCallBack('expired', function(data, more) {
      var i, len, obj, results;
      if (more) {
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          obj = data[i];
          results.push($scope.codes.push(obj));
        }
        return results;
      } else {
        return $scope.codes = data;
      }
    });
    $scope.initGet = function() {
      return pxApiConnect.apiGet('expired');
    };
    $scope.initGet();
    $scope.refresh = function() {
      return $scope.initGet()["finally"](function() {
        return $scope.$broadcast('scroll.refreshComplete');
      });
    };
    $scope.loadMore = function() {
      var res;
      res = pxApiConnect.apiMore('expired');
      if (res.more) {
        return res.future["finally"](function() {
          return $scope.$broadcast('scroll.infiniteScrollComplete');
        });
      } else {
        return $scope.$broadcast('scroll.infiniteScrollComplete');
      }
    };
    return $scope.submit = function(data) {
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return $scope.initGet();
      });
    };
  }).controller('DisputeCtrl', function($scope, pxApiConnect) {
    $scope.codes = [];
    pxApiConnect.setCallBack('disputed', function(data, more) {
      var i, len, obj, results;
      if (more) {
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          obj = data[i];
          results.push($scope.codes.push(obj));
        }
        return results;
      } else {
        return $scope.codes = data;
      }
    });
    $scope.initGet = function() {
      return pxApiConnect.apiGet('disputed');
    };
    $scope.initGet();
    $scope.refresh = function() {
      return $scope.initGet()["finally"](function() {
        return $scope.$broadcast('scroll.refreshComplete');
      });
    };
    $scope.loadMore = function() {
      var res;
      res = pxApiConnect.apiMore('disputed');
      if (res.more) {
        return res.future["finally"](function() {
          return $scope.$broadcast('scroll.infiniteScrollComplete');
        });
      } else {
        return $scope.$broadcast('scroll.infiniteScrollComplete');
      }
    };
    return $scope.submit = function(data) {
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return $scope.initGet();
      });
    };
  }).controller('TestCtrl', function($scope) {
    console.log("Initialised Test");
    $scope.data = {
      code: ""
    };
    $scope.hello = function() {
      return alert($scope.data.code);
    };
    return $scope.clear = function() {
      return $scope.data.code = "";
    };
  });

}).call(this);
