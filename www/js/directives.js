// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('perkkx.directives', []).directive('pxCoupon', function() {
    return {
      restrict: 'E',
      templateUrl: 'directives/coupon.html',
      scope: {
        coupon: '=coupon',
        hRedeem: '=redeem',
        hExpiry: '=expiry',
        hBill: '=bill'
      }
    };
  }).directive('pxLoginImg', function() {
    return {
      restrict: 'E',
      templateUrl: 'directives/loginImg.html',
      scope: {
        title: '=title'
      }
    };
  }).directive('pxBillForm', function() {
    return {
      restrict: 'E',
      scope: {
        submitFunc: '=submitFunc',
        formshow: '=show',
        submitObj: '=submitObj',
        defPaid: '=defaultPaid',
        defDiscount: '=defaultDiscount',
        scrollBack: '=scrollBack'
      },
      compile: function(elem, attr) {
        if (!attr.scrollBack) {
          return attr.scrollBack = 'false';
        }
      },
      controller: function($scope, $log, $ionicPopup, $ionicScrollDelegate) {
        var cleanup;
        $scope.dealOptsCheck = function() {
          return $scope.submitObj.hasOwnProperty('dealOpts');
        };
        $scope.data = {
          selectedOpt: {}
        };
        $scope.$watch(function() {
          return $scope.submitObj;
        }, function() {
          if ($scope.dealOptsCheck()) {
            return $scope.data.selectedOpt = $scope.submitObj.dealOpts[$scope.submitObj.selectedIndex];
          }
        });
        cleanup = function() {
          $scope.data.paid = parseInt($scope.defPaid);
          return $scope.data.discount = parseInt($scope.defDiscount);
        };
        cleanup();
        $scope.cancel = function() {
          $scope.formshow = false;
          if ($scope.scrollBack) {
            $ionicScrollDelegate.scrollTop();
          }
          return cleanup();
        };
        $scope.validate = function() {
          var discount, ds, errormsg, paid, patt, pd, result;
          pd = $scope.data.paid;
          ds = $scope.data.discount;
          $log.info("Values for pd and ds : " + pd + ", " + ds);
          errormsg = "";
          patt = /^\d+$/;
          if (!patt.test(pd) || !patt.test(ds)) {
            errormsg = "The bill values you entered are invalid: " + pd + " and " + ds;
          } else {
            paid = parseInt(pd);
            discount = parseInt(ds);
            if (paid <= 0 || discount <= 0) {
              errormsg = "The bill values must be greater than 0";
            } else if (discount >= paid) {
              errormsg = "The discount amount should be less than the amount paid";
            }
          }
          result = errormsg === "";
          $log.debug(("Result: " + result + ", Error message: ") + errormsg);
          if (!result) {
            $ionicPopup.alert({
              title: 'Unable to submit',
              template: errormsg,
              okType: 'button-positive button-small button-clear'
            });
          }
          return result;
        };
        return $scope.submit = function() {
          var res;
          $scope.formshow = false;
          if ($scope.scrollBack) {
            $ionicScrollDelegate.scrollTop();
          }
          res = {
            paid: parseInt($scope.data.paid),
            discount: parseInt($scope.data.discount)
          };
          if ($scope.dealOptsCheck()) {
            res.used_on = $scope.submitObj.used_on;
            res.cID = $scope.data.selectedOpt.cID;
          } else {
            res.cID = $scope.submitObj.cID;
          }
          if ($scope.submitObj.hasOwnProperty('cID')) {
            res.orig_cID = $scope.submitObj.cID;
          }
          res.rcode = $scope.submitObj.rcode;
          res.userID = $scope.submitObj.rcode.slice(0, 6);
          cleanup();
          return $scope.submitFunc(res);
        };
      },
      templateUrl: 'directives/bill-form.html'
    };
  });

}).call(this);
