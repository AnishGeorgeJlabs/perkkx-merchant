// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('perkkx.directives', []).directive('pxCoupon', function() {
    return {
      restrict: 'E',
      templateUrl: 'directives/coupon.html',
      scope: {
        coupon: '=coupon',
        hRedeem: '=redeem',
        hExpiry: '=expiry',
        hBill: '=bill'
      }
    };
  }).directive('pxBillForm', function() {
    return {
      restrict: 'E',
      scope: {
        submitFunc: '=submitFunc',
        formshow: '=show',
        submitObj: '=submitObj',
        defPaid: '=defaultPaid',
        defDiscount: '=defaultDiscount',
        slider: '=slider'
      },
      compile: function(elem, attr) {
        if (!attr.slider) {
          return attr.slider = 'true';
        }
      },
      controller: function($scope, pxDateCheck, $log, $ionicPopup, $cordovaToast) {
        var cleanup;
        $scope.sliderCheck = function() {
          return $scope.slider && pxDateCheck($scope.submitObj.used_on);
        };
        $scope.dealOptsCheck = function() {
          return $scope.submitObj.hasOwnProperty('dealOpts');
        };
        $scope.data = {
          selectedOpt: {}
        };
        $scope.$watch(function() {
          return $scope.submitObj;
        }, function() {
          if ($scope.dealOptsCheck()) {
            return $scope.data.selectedOpt = $scope.submitObj.dealOpts[$scope.submitObj.selectedIndex];
          }
        });
        cleanup = function() {
          $scope.paid = parseInt($scope.defPaid);
          $scope.discount = parseInt($scope.defDiscount);
          return $scope.invalid = false;
        };
        cleanup();
        $scope.cancel = function() {
          cleanup();
          return $scope.formshow = false;
        };
        $scope.validate = function() {
          var result;
          result = $scope.invalid || ($scope.paid > 0 && $scope.discount > 0);
          if (!result) {
            $ionicPopup.alert({
              title: 'Unable to submit',
              template: 'The bill values you entered are invalid',
              okType: 'button-positive button-small button-clear'
            });
          }
          return result;
        };
        return $scope.submit = function() {
          var res;
          res = $scope.invalid ? {
            status: 'expired'
          } : {
            status: 'used',
            paid: $scope.paid,
            discount: $scope.discount
          };
          res.submitted_on = parseInt(Date.now());
          if ($scope.dealOptsCheck()) {
            $log.debug("submitting for bill " + (JSON.stringify($scope.data.selectedOpt)));
            res.used_on = $scope.submitObj.used_on;
            res.cID = $scope.data.selectedOpt.cID;
          } else {
            $log.debug("no dealOpts");
            res.cID = $scope.submitObj.cID;
          }
          res.rcode = $scope.submitObj.rcode;
          res.userID = $scope.submitObj.rcode.slice(0, 6);
          cleanup();
          return $scope.submitFunc(res);
        };
      },
      templateUrl: 'directives/bill-form.html'
    };
  });

}).call(this);
