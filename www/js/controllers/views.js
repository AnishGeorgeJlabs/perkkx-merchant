// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('perkkx.controllers.views', []).controller('RedeemCtrl', function($log, $scope, pxApiConnect, pxBadgeProvider, pxUserCred) {

    /*
      Controller for the first tab,
      used to search for the coupon and showing the deal
     */
    var callback, clearState;
    $scope.data = {
      rcode: "",
      resultCode: ""
    };
    $scope.state = {
      isLoading: false,
      isError: false,
      haveResult: false,
      billshow: false
    };
    clearState = function() {
      $scope.state.isLoading = false;
      $scope.state.isError = false;
      $scope.state.haveResult = false;
      return $scope.state.billshow = false;
    };
    callback = function(data) {
      $scope.state.isLoading = false;
      $log.debug("data : " + (JSON.stringify(data)));
      if (data.valid) {
        $scope.data.resultCode = data.data;
        $scope.state.haveResult = true;
        $scope.state.billshow = true;
        if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
          return cordova.plugins.Keyboard.close();
        }
      } else {
        $log.debug("else part");
        return $scope.state.isError = true;
      }
    };
    $scope.clearInput = function() {
      $log.debug('clearing');
      clearState();
      return $scope.data.rcode = "";
    };
    $scope.checkCode = function() {
      var rcode;
      rcode = $scope.data.rcode;
      if (rcode.length === 8) {
        $scope.state.isLoading = true;
        return pxApiConnect.apiCheckValid(rcode, callback);
      } else {
        return clearState();
      }
    };
    $scope.submit = function(data) {
      $scope.state.isLoading = true;
      $log.debug("submitting data: " + data);
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        $scope.clearInput();
        return pxBadgeProvider.refresh();
      });
    };
    pxUserCred.register(function() {
      return $scope.clearInput();
    });
    return $scope.$watch(function() {
      return $scope.data.rcode;
    }, function(new_val, old_val) {
      if (new_val.length > 8) {
        return $scope.data.rcode = old_val;
      }
    });
  }).controller('UsedCtrl', function($scope, pxApiConnect, $log, pxBadgeProvider, pxUserCred) {

    /*
      Controller for tab 2,
      Shows the used codes
     */
    $scope.codes = [];
    $scope.initGet = function() {
      $log.debug("Init get for used called");
      return pxApiConnect.apiGet('used');
    };
    $scope.refresh = function() {
      pxBadgeProvider.updateBadgesOnly();
      return $scope.initGet()["finally"](function() {
        return $scope.$broadcast('scroll.refreshComplete');
      });
    };
    $scope.loadMore = function() {
      var res;
      res = pxApiConnect.apiMore('used');
      if (res.more) {
        return res.future["finally"](function() {
          return $scope.$broadcast('scroll.infiniteScrollComplete');
        });
      } else {
        return $scope.$broadcast('scroll.infiniteScrollComplete');
      }
    };
    $scope.submit = function(data) {
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return pxBadgeProvider.refresh();
      });
    };
    pxApiConnect.setCallBack('used', function(data, more) {
      var i, len, obj, results;
      if (more) {
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          obj = data[i];
          results.push($scope.codes.push(obj));
        }
        return results;
      } else {
        return $scope.codes = data;
      }
    });
    pxBadgeProvider.register(function() {
      return $scope.initGet();
    });
    return pxUserCred.register(function() {
      return $scope.initGet();
    });
  }).controller('PendingCtrl', function($log, $scope, pxApiConnect, pxBadgeProvider, pxUserCred) {

    /*
      Last tab, used to show pending codes,
      NOTE: pending codes are actually disputed codes
     */
    $scope.codes = [];
    $scope.initGet = function() {
      return pxApiConnect.apiGet('disputed');
    };
    $scope.refresh = function() {
      pxBadgeProvider.updateBadgesOnly();
      return $scope.initGet()["finally"](function() {
        return $scope.$broadcast('scroll.refreshComplete');
      });
    };
    $scope.loadMore = function() {
      var res;
      res = pxApiConnect.apiMore('disputed');
      if (res.more) {
        return res.future["finally"](function() {
          return $scope.$broadcast('scroll.infiniteScrollComplete');
        });
      } else {
        return $scope.$broadcast('scroll.infiniteScrollComplete');
      }
    };
    $scope.submit = function(data) {
      return pxApiConnect.apiSubmit(data)["finally"](function() {
        return pxBadgeProvider.refresh();
      });
    };
    pxApiConnect.setCallBack('disputed', function(data, more) {
      var i, len, obj, results;
      if (more) {
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          obj = data[i];
          results.push($scope.codes.push(obj));
        }
        return results;
      } else {
        return $scope.codes = data;
      }
    });
    pxBadgeProvider.register(function() {
      return $scope.initGet();
    });
    return pxUserCred.register(function() {
      return $scope.initGet();
    });
  });

}).call(this);
